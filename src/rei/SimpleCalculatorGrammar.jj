/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SimpleCalculatorGrammar.jj */
/*@egen*//**
 * Simple calculator JJTree file
 */
options
{
  STATIC = false;                                        
                                       
                  // Visitor\u7e67\uff6f\u7e5d\uff69\u7e67\uff79\u7e67\u5824\u51fd\u8b0c\u820c\u2606\u7e67\ufffd
  UNICODE_INPUT = false; // \u7e5d\uff66\u7e5d\u4e5d\u3055\u7e5d\uff7c\u7e5d\u5ce8\u3012\u9697\uff63\u8b6b\u820c\uff52\u9666\u5f8c\uff4f\u7e3a\uff6a\u7e3a\ufffd\uff7c\u57df\u5f8b\u8b5b\uff6c\u96b1\u6a12\uff6d\u5ce8\uff52\u83f4\uff7f\u7e67\u4e0a\u2191\u7e3a\ufffd\uff7c\ufffd
}

PARSER_BEGIN(SimpleCalculatorParser)
package rei;
import java.util.List;
import java.util.ArrayList;

public class SimpleCalculatorParser/*@bgen(jjtree)*/implements SimpleCalculatorParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTSimpleCalculatorParserState jjtree = new JJTSimpleCalculatorParserState();

/*@egen*/
  public static void main(String [] args)
  {
    System.out.println(SimpleCalculatorParser.eval(System.in));
  }

  public static double eval(java.io.InputStream in)
  {
    SimpleCalculatorParser parser = new SimpleCalculatorParser(in);

    double x = 0.0;
    SimpleCalculatorParserVisitor visitor = new SimpleCalculatorParserVisitorImpl();
    try {
        x = (double) parser.Root().jjtAccept(visitor, null);
    } catch (ParseException e) {
        e.printStackTrace();
    }
    return x;
  }
}
PARSER_END(SimpleCalculatorParser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < ADD_OP :
    "+"
  | "-" >
| < MUL_OP :
    "*"
  | "/"
  | "%" >
| < OPEN_BRACKET : "(" >
| < CLOSE_BRACKET : ")" >
| < DECIMAL :
    (< DIGIT >)+
    (
      "." (< DIGIT >)+
    )? >
| < DIGIT : [ "0"-"9" ] >
}

SimpleNode Root() :
{/*@bgen(jjtree) Root */
  ASTRoot jjtn000 = new ASTRoot(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Root */
  try {
/*@egen*/
  Expr() "\n"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expr() :
{/*@bgen(jjtree) Expr */
  ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr */
  try {
/*@egen*/
  AddExpr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AddExpr() :
{/*@bgen(jjtree) AddExpr */
  ASTAddExpr jjtn000 = new ASTAddExpr(JJTADDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  List tokens = new ArrayList();
  Token t = null;
}
{/*@bgen(jjtree) AddExpr */
  try {
/*@egen*/
  MulExpr()
  (
    t = < ADD_OP > 
    MulExpr() { tokens.add(t); }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(tokens);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MulExpr() :
{/*@bgen(jjtree) MulExpr */
  ASTMulExpr jjtn000 = new ASTMulExpr(JJTMULEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  List tokens = new ArrayList();
  Token t = null;
}
{/*@bgen(jjtree) MulExpr */
  try {
/*@egen*/
  UnaryExpr()
  (
    t = < MUL_OP > 
    UnaryExpr() { tokens.add(t); }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(tokens);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void UnaryExpr() :
{/*@bgen(jjtree) UnaryExpr */
  ASTUnaryExpr jjtn000 = new ASTUnaryExpr(JJTUNARYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryExpr */
  try {
/*@egen*/
  < OPEN_BRACKET >  Expr() < CLOSE_BRACKET >
| Decimal()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Decimal() :
{/*@bgen(jjtree) Decimal */
  ASTDecimal jjtn000 = new ASTDecimal(JJTDECIMAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) Decimal */
  try {
/*@egen*/
  t = < DECIMAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}